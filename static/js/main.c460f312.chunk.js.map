{"version":3,"sources":["components/Navbar.js","components/Home.js","components/About.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["withRouter","props","react_default","a","createElement","className","Link","to","NavLink","Home","state","this","setState","posts","postList","length","map","post","key","id","title","body","Component","connect","About","rops","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","BrowserRouter","basename","components_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","initState","rootReducer","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c460f312.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, NavLink, withRouter } from 'react-router-dom';\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <nav className=\"nav-wrapper grey darjen-3\">\r\n      <div className=\"container\">\r\n        <Link to=\"/\" className=\"brand-logo\">PokeTimes</Link>\r\n        <ul className=\"right\">\r\n          <li><Link to=\"/\">Home</Link></li>\r\n          <li><NavLink to=\"/about\">About</NavLink></li>\r\n          <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n\r\n  componentWilMount(state) {\r\n    this.setState({\r\n      posts: state.posts\r\n    })\r\n  }\r\n  render() {\r\n    const { posts } = this.props;\r\n    const postList = posts.length ? (\r\n      posts.map(post => {\r\n        return (\r\n          <div className=\"post card\" key={post.id}>\r\n            <div className=\"card-content\">\r\n              <Link to={'/' + post.id}>\r\n                <span className=\"card-title black-text\">{post.title}</span>\r\n              </Link>\r\n              <p>{post.body}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    ) : (\r\n      <div className=\"center\">No posts yet</div>\r\n    );\r\n    return (\r\n      <div className=\"container home\">\r\n        <h4 className=\"center\">Home</h4>\r\n        {postList}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.posts\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React from 'react';\r\n\r\nconst About = (rops) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h4 className=\"center\">About</h4>\r\n      <p>This is the about page</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Contact = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h4 className=\"center\">Contact</h4>\r\n      <p>Please contact us on the following contacts:\r\n\r\n        .\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deletePost } from '../actions/postActions';\r\n\r\nclass Post extends Component {\r\n  handleClick = () => {\r\n    this.props.deletePost(this.props.post.id);\r\n    this.props.history.push('/');\r\n  }\r\n  render() {\r\n    const post = this.props.post ? (\r\n      <div className=\"post\">\r\n        <h4 className=\"center\">{this.props.post.title}</h4>\r\n        <p>{this.props.post.body}</p>\r\n        <div className=\"center\">\r\n          <button className=\"btn grey\" onClick={this.handleClick}>\r\n            Delete Post\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading post...</div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {post}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let id = ownProps.match.params.post_id;\r\n  return {\r\n    post: state.posts.find(post => post.id === id)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deletePost: (id) => dispatch(deletePost(id))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","export const deletePost = (id) => {\r\n  return {\r\n    type: 'DELETE_POST',\r\n    id\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Navbar from './components/Navbar'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\nimport Contact from './components/Contact';\r\nimport Post from './components/Post';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename=\"/poketimes\">\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/about' component={About} />\r\n            <Route path='/contact' component={Contact} />\r\n            <Route path=\"/:post_id\" component={Post}></Route>\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initState = {\r\n  posts: [\r\n    {id: '1', title: 'The first PokeTime post', body: 'PokeTime post'},\r\n    {id: '2', title: 'The second PokeTime post', body: 'PokeTime post PokeTime post'},\r\n    {id: '3', title: 'The third PokeTime post', body: 'PokeTime post PokeTime post PokeTime post'},\r\n    {id: '4', title: 'The fourth PokeTime post', body: 'PokeTime post PokeTime post PokeTime post PokeTime post'}\r\n  ]\r\n}\r\nconst rootReducer = (state = initState, action) => {\r\n  if (action.type === 'DELETE_POST') {\r\n    let newPosts = state.posts.filter(post => {\r\n      return action.id !== post.id\r\n    });\r\n    return {\r\n      ...state,\r\n      posts: newPosts\r\n    }\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}